"use strict";(self.webpackChunknomadd=self.webpackChunknomadd||[]).push([[1776],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),d=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=d(e.components);return i.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=d(n),p=r,f=m["".concat(s,".").concat(p)]||m[p]||u[p]||a;return n?i.createElement(f,o(o({ref:t},c),{},{components:n})):i.createElement(f,o({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:r,o[1]=l;for(var d=2;d<a;d++)o[d]=n[d];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}p.displayName="MDXCreateElement"},156:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var i=n(7462),r=(n(7294),n(3905));const a={id:"virtual-node",title:"Vnode"},o=void 0,l={unversionedId:"vnode/virtual-node",id:"vnode/virtual-node",title:"Vnode",description:"VNode Interface",source:"@site/docs/vnode/index.md",sourceDirName:"vnode",slug:"/vnode/",permalink:"/nomadd-documentation-beta/docs/vnode/",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/vnode/index.md",tags:[],version:"current",frontMatter:{id:"virtual-node",title:"Vnode"},sidebar:"tutorialSidebar",previous:{title:"Configuration",permalink:"/nomadd-documentation-beta/docs/user-manual/configuration"}},s={},d=[{value:"Overview",id:"overview",level:2}],c={toc:d},m="wrapper";function u(e){let{components:t,...a}=e;return(0,r.kt)(m,(0,i.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"VNode Interface",src:n(6052).Z,width:"3358",height:"1706"})),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"The Virtual Node (VNode) provides a user interface to interact with node memory fields and attached devices, enabling monitoring and control over various parameters and device statuses. Below is a guide to navigating and using the VNode interface:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Status: Not Paired")," - Indicates that the VNode is not yet paired. The pairing process involves connecting with the Nomadd Chief."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Communication Type")," - This shows the communication method with the Chief. Different communication types can be configured within the ",(0,r.kt)("inlineCode",{parentName:"li"},"src/communication")," directory of the vnode repository, where each class handles its logic type."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Listening IP")," - Displays the current bound IP address."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Node Memory Fields")," - Contains all the fields defined in ",(0,r.kt)("inlineCode",{parentName:"li"},"src/memory/fields.json"),". This section is essential for viewing and updating the node's operational parameters."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Memory Region")," - Displays the memory region before listing the region fields."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Field Name Column")," - Shows the value of the field name from the field object in ",(0,r.kt)("inlineCode",{parentName:"li"},"fields.json"),"."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Current Value Column")," - Indicates the current value of a field. Initially, this is set to the default value from ",(0,r.kt)("inlineCode",{parentName:"li"},"fields.json"),", with the state saved upon updates."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Actions Column")," - The 'Update' button here triggers the update flow. When the current value is changed, the update is also sent to the Chief."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Devices Section")," - Displays the configured attached devices as defined in the node. To edit or add new devices, modify files such as ",(0,r.kt)("inlineCode",{parentName:"li"},"src/devices/Motor.ts")," and activate them in ",(0,r.kt)("inlineCode",{parentName:"li"},"src/App.ts")," within the ",(0,r.kt)("inlineCode",{parentName:"li"},"getAttachedDevices")," function."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Motor On/Off Button")," - Activates the motors simulation with defined behavior in ",(0,r.kt)("inlineCode",{parentName:"li"},"getAttachedDevices"),". Options include 'random', which generates random values between a specified range, 'increment' which generates incremental values from minimum to maximum.")),(0,r.kt)("p",null,"This interface allows for comprehensive management and configuration of the Virtual Node, facilitating effective communication and operational efficiency."))}u.isMDXComponent=!0},6052:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/vnode-interface-2c4d8a227602c0cf5f87db15f17bb961.png"}}]);